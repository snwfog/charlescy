---
layout: post
title: "PeekingIterator"
date: 2013-05-29 22:11
comments: true
categories: 
---
I had an interview with Google Montreal this year in February. It was an amazing experience for me, but what stroke me the most was how humble their employees were. I studied/reviewed very late the night before, because I was expecting difficult questions. I arrived overly nervous for my interview. To my delight, the interviewers were extremely, extremely delicate and polite. I had interviewed with two persons. Although I remember clearly both questions, the first one is the reason of this post. The interviewed asked me the following question, "Are you familiar with the notion of iterators?" To which I answered yes. Then she asked me, "Could you please write me a peeking iterator?" At this moment, my brain froze. I was thinking about everything and anything. But really what the interviewer wanted, was a simple __class__ of iterator, which has a method `peel()` that would not `pop` the element. As a short recap of the usage of iterator in Java, here is how it is explained in Absolute Java. With an iterator, you need to call `hasNext()`, to check if there is a next element, and then, it is when you have called `hasNext()` that you are allowed to call `next()`, which would return this next element. In this scenario, this next element return by `next()` is consumed. And in order to call `next()` again, you __must__ call `hasNext()` before. Otherwise it would not work. 
<!--more-->
The reason why I struggle with the question was that first, I was extremely nervous, and I was thinking about algorithm, and data structures, but what the interviewer wanted was just a class implementation. When she saw me that I was keep probing her for clues, then she decided to pick up a marker, and write me out the constructor of the class `public PeekingIterator()`. Then she even told me that I already have as instance variable a proper `Iterator` instance. 

Sure I know to constructor an iterator, that you must implement the `Iterable` interface, and its merely three methods (`hasNext()`, `next()`, `remove()`) and that in this case, I had to, in addition, implement the `peek()` method as well. But keep in mind that at this point, I was not sure about the correct behaviour of the iterator as I have explained above.

As the interview continues, I start to regain some of my mind, and started to write a crude, and ugly piece of code that had 4 (!) mistakes (which were pointed out by the interviewer). She even went through the code and debugged it with me. I was terribly ashamed. The reason is, the implementation was extremely easy, and had I been sitting relaxely in front of my computer, I would be able to get that in less than 5 minutes. But I was extremely nervous, and my mind was thinking overly complex, as in "this is google after all, the answer cannot be so simple". But I was terribly wrong. 

Today, at work, I need a set structure in Java for my routine implementation of a project. I was looking through Guava, a Java based helper libraries by Google. And then I saw [this](https://code.google.com/p/guava-libraries/wiki/CollectionHelpersExplained#PeekingIterator). The `PeekingIterator`. This brought me back the experience that I had the interview with Google. And I secretly wish that I could go back in time, and not only I could have wrote a flawless `PeekingIterator` class, but I can also tell her that I've used it many times in my project that  had Guava libraries as an important dependency.